// Generated by CoffeeScript 1.3.1
var events;

events = typeof exports !== "undefined" && exports !== null ? exports : (this['events'] = {});

events.EventEmitter = (function() {

  EventEmitter.name = 'EventEmitter';

  function EventEmitter() {}

  EventEmitter.prototype.emit = function(type) {
    var args, listener, _i, _len, _ref;
    if (!(this._events && type in this._events && this._events[type].length)) {
      return false;
    }
    args = Array.prototype.slice.call(arguments, 1);
    _ref = this._events[type];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      listener = _ref[_i];
      listener.apply(this, args);
    }
    return true;
  };

  EventEmitter.prototype.addListener = function(type, listener) {
    this.emit('newListener', type, listener);
    this._events || (this._events = {});
    if (type in this._events) {
      this._events[type].push(listener);
    } else {
      this._events[type] = [listener];
    }
    return this;
  };

  EventEmitter.prototype.on = EventEmitter.prototype.addListener;

  EventEmitter.prototype.once = function(type, listener) {
    var g,
      _this = this;
    g = function() {
      _this.removeListener(type, g);
      return listener.apply(_this, arguments);
    };
    this.on(type, g);
    return this;
  };

  EventEmitter.prototype.removeListener = function(type, listener) {
    var i, l, _ref;
    if (this._events && type in this._events) {
      _ref = this._events[type];
      for (l in _ref) {
        i = _ref[l];
        if (l === listener) {
          this._events[type].splice(i--, 1);
        }
      }
      if (this._events[type].length === 0) {
        delete this._events[type];
      }
    }
    return this;
  };

  EventEmitter.prototype.removeAllListeners = function(type) {
    if (this._events && type in this._events) {
      delete this._events[type];
    }
    return this;
  };

  return EventEmitter;

})();
